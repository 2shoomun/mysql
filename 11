def min_edit_distance(source, target):
    m = len(source)
    n = len(target)

    # Create a 2D table to store the minimum edit distances
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize the first row and column
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    # Fill in the table using dynamic programming
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if source[i - 1] == target[j - 1]:
                cost = 0
            else:
                cost = 1
            dp[i][j] = min(dp[i - 1][j] + 1,       # Deletion
                           dp[i][j - 1] + 1,       # Insertion
                           dp[i - 1][j - 1] + cost)  # Substitution

    # The value at dp[m][n] is the minimum edit distance
    return dp[m][n]

# Input strings
source1 = "intention"
target1 = "execution"

source2 = "Piece"
target2 = "Peace"

# Calculate and print the minimum edit distances
distance1 = min_edit_distance(source1, target1)
distance2 = min_edit_distance(source2, target2)

print(f"Minimum edit distance between '{source1}' and '{target1}' is {distance1}.")
print(f"Minimum edit distance between '{source2}' and '{target2}' is {distance2}.")
